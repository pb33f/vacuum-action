name: "vacuum OpenAPI Linter and Quality Analysis tool"
description: "Lint and quality check an OpenAPI specification using vacuum, the world's fastest OpenAPI linter"

inputs:
  openapi_path:
    description: "Path to the OpenAPI spec file (relative to repo root, e.g., 'specs/openapi.yaml')"
    required: true
  show_rules:
    description: "Show the rules that were applied (default: false)"
    required: false
    default: "false"
  minimum_score:
    description: "Minimum score required to not fail the check (default: 70%)"
    required: false
    default: "70"
  fail_on_error:
    description: "Any errors will fail the check (default: true), setting to will not fail, regardless of errors reported"
    required: false
    default: "true"
  ruleset:
    description: "Optional ruleset file or URL for vacuum lint (e.g. 'rules/ruleset.yaml')"
    required: false
    default: ""
  github_token:
    description: "GitHub token (needs write permissions on PRs to post comments)"
    required: true
  print_logs:
    description: "Print the markdown report out to runner logs (defaults to 'true')"
    required: false
    default: "true"


runs:
  using: "composite"
  steps:
    - name: Lint OpenAPI specification using vacuum
      id: lint
      shell: bash
      run: |
        args=( lint --pipeline-output "${{ inputs.openapi_path }}" )
        
        # --min-score <value>
        args+=( --min-score "${{ inputs.minimum_score }}" )
        
        # --fail-severity none|error
        if [ "${{ inputs.fail_on_error }}" = "true" ]; then
          args+=( --fail-severity error )
        else
          args+=( --fail-severity none )
        fi
        
        # --show-rules only if show_rules == "true"
        if [ "${{ inputs.show_rules }}" = "true" ]; then
          args+=( --show-rules )
        fi
        
        # optional ruleset
        if [ -n "${{ inputs.ruleset }}" ]; then
          args+=( --ruleset "${{ inputs.ruleset }}" )
        fi
        
        CMD=( docker run --rm \
               -v "$GITHUB_WORKSPACE":/work:ro \
               dshanley/vacuum "${args[@]}" )
        
        echo "Running: ${CMD[*]}"
        report=$("${CMD[@]}")
        
        REPORT_FILE="$GITHUB_WORKSPACE/vacuum-lint-report.md"
        {
          echo "<!-- vacuum-lint-report -->"
          echo
          echo "$report"
        } > "$REPORT_FILE"
        
        # print logs to console if enabled
        if [ "${{ inputs.print_logs }}" = "true" ]; then
          cat "$REPORT_FILE"
        fi
        
        echo "report_path=vacuum-lint-report.md" >> "$GITHUB_OUTPUT"
      env:
        DOCKER_BUILDKIT: 1

    - name: Find existing vacuum-lint comment (if any)
      id: find-comment
      uses: peter-evans/find-comment@v3
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: "<!-- vacuum-lint-report -->"


    - name: Create or update vacuum-lint comment
      if: always()
      uses: peter-evans/create-or-update-comment@v4
      with:
        token: ${{ inputs.github_token }}
        repository: ${{ github.repository }}
        issue-number: ${{ github.event.pull_request.number }}
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        body-path: ${{ steps.lint.outputs.report_path }}
        edit-mode: replace




